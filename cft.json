{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template to launch an Ubuntu EC2 instance in the Mumbai region with a specified security group and startup script to run a Flask server and Ollama.",
    "Resources": {
      "EC2Instance": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3.small",
          "SecurityGroups": ["GeoGabbleAuthSg"],
          "ImageId": {
            "Fn::FindInMap": [
              "RegionMap",
              {
                "Ref": "AWS::Region"
              },
              "AMI"
            ]
          },
          "KeyName": "Logix-authentication-key",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "# Redirect all output to a log file\n",
                  "exec > /var/log/user-data.log 2>&1\n",
                  "echo \"Starting user data script...\"\n",
                  "sudo apt-get update -y\n",
                  "sudo apt-get install nginx -y\n",
                  "echo \"Nginx installed\"\n",
                  "\n",
                  "# Install Python3, pip, and git\n",
                  "sudo apt-get install -y python3 python3-pip git\n",
                  "\n",
                  "# Clone the Flask application from GitHub\n",
                  "cd /home/ubuntu\n",
                  "git clone https://github.com/Lakshya0257/FealtyXAssignment.git\n",
                  "cd FealtyXAssignment\n",
                  "sudo pip3 install -r requirements.txt\n",
                  "\n",
                  "# Start the Flask application\n",
                  "nohup python3 app.py &\n",
                  "echo \"Flask server started\"\n",
                  "\n",
                  "# Install Docker for Ollama setup\n",
                  "sudo apt-get install -y docker.io\n",
                  "sudo systemctl start docker\n",
                  "sudo systemctl enable docker\n",
                  "\n",
                  "# Run Ollama and download llama3.1:latest model\n",
                  "sudo docker pull ollama/ollama\n",
                  "sudo docker run -d --name ollama -p 11434:11434 ollama/ollama\n",
                  "curl -X POST http://127.0.0.1:11434/models -H \"Content-Type: application/json\" -d '{\"model\": \"llama3.1:latest\"}'\n",
                  "echo \"Ollama server with llama3.1:latest started\"\n",
                  "\n",
                  "# Configure Nginx\n",
                  "sudo bash -c 'cat <<EOT > /etc/nginx/sites-available/default\n",
                  "server {\n",
                  "    listen 80;\n",
                  "    server_name fealtyx.corevision.live;\n",
                  "\n",
                  "    location / {\n",
                  "        proxy_pass http://localhost:5000;\n",
                  "        proxy_set_header Host $$host;\n",
                  "        proxy_set_header X-Real-IP $$remote_addr;\n",
                  "        proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;\n",
                  "        proxy_set_header X-Forwarded-Proto $$scheme;\n",
                  "    }\n",
                  "}\n",
                  "EOT'\n",
                  "echo \"Nginx configuration completed\"\n",
                  "\n",
                  "# Install Certbot and obtain SSL certificate\n",
                  "sudo apt-get install certbot python3-certbot-nginx -y\n",
                  "sudo certbot --nginx -d fealtyx.corevision.live --non-interactive --agree-tos -m lakshyabhati24@gmail.com\n",
                  "echo \"SSL certificate installed\"\n",
                  "\n",
                  "# Restart Nginx to apply changes\n",
                  "sudo systemctl restart nginx\n",
                  "echo \"Nginx restarted with SSL\"\n",
                  "echo \"Script completed.\"\n"
                ]
              ]
            }
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "FealtyXInstance"
            }
          ]
        }
      },
      "DNSRecord": {
        "Type": "AWS::Route53::RecordSet",
        "Properties": {
          "HostedZoneName": "corevision.live.",
          "Name": "fealtyx.corevision.live.",
          "Type": "A",
          "TTL": "60",
          "ResourceRecords": [
            {
              "Fn::GetAtt": [
                "EC2Instance",
                "PublicIp"
              ]
            }
          ]
        }
      }
    },
    "Mappings": {
      "RegionMap": {
        "ap-south-1": {
          "AMI": "ami-0f58b397bc5c1f2e8"
        }
      }
    },
    "Outputs": {
      "InstancePublicDomain": {
        "Description": "Public DNS of the EC2 instance",
        "Value": {
          "Fn::GetAtt": [
            "EC2Instance",
            "PublicDnsName"
          ]
        }
      },
      "InstancePublicIP": {
        "Description": "Public IP address of the EC2 instance",
        "Value": {
          "Fn::GetAtt": [
            "EC2Instance",
            "PublicIp"
          ]
        }
      },
      "InstanceRegion": {
        "Description": "Region of the EC2 instance",
        "Value": {
          "Ref": "AWS::Region"
        }
      }
    }
  }
  